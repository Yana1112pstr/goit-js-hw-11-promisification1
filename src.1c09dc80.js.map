{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","amount","reject","logSuccess","logError","warn","catch"],"mappings":";;;AAAA,MAAMA,EAAQC,GACH,IAAIC,QAASC,IAChBC,WAAW,KACPD,EAAQF,IACTA,KAIHI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACbnB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAE3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAExD,OAAA,IAAIhB,QAASC,IACdA,EAAQa,MAIVX,EAASW,GAAgBT,QAAQY,MAAMH,GAE3CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACpBvC,MAAMe,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkB,EAAGC,GAAAA,EAAIC,OAAAA,MACvB5B,MAAAA,EAAQoB,EAA0B,IAAK,KACtC,OAAA,IAAIlB,QAAQ,CAACC,EAAS0B,KACzBzB,WAAW,KACQmB,KAAKE,SAAW,GAE/BtB,EAAQ,CAAEwB,GAAAA,EAAIrB,KAAMN,IAEpB6B,EAAOF,IAER3B,MAKH8B,EAAa,EAAGH,GAAAA,EAAIrB,KAAAA,MACxBC,QAAQC,mBAAmBmB,kBAAmBrB,QAG1CyB,EAAWJ,IACfpB,QAAQyB,qCAAqCL,+BAIjDD,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAC/BnB,KAAKqB,GACLG,MAAMF,GAETL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAC/BnB,KAAKqB,GACLG,MAAMF,GAETL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,KAC/BnB,KAAKqB,GACLG,MAAMF,GAETL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAC/BnB,KAAKqB,GACLG,MAAMF;;ACpCT,aANA,QAAA,oBAEA,QAAA,eAEA,QAAA,eAEA,QAAA","file":"src.1c09dc80.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms)\n        }, ms)\n    })\n  };\n  \n  const logger = time => console.log(`Resolved after ${time}ms`);\n  \n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n  const toggleUserState = (allUsers, userName) => {\n\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    return new Promise((resolve) => {\n          resolve(updatedUsers)\n      })\n  };\n  \n  const logger = updatedUsers => console.table(updatedUsers);\n  \n    toggleUserState(users, 'Mango').then(logger);\n    toggleUserState(users, 'Lux').then(logger);\n  ","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = ({ id, amount }) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n        if (canProcess) {\n            resolve({ id, time: delay });\n        } else {\n            reject(id);\n        }\n        }, delay);    \n    })\n    \n  };\n  \n  const logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n  \nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n  \nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","import './sass/main.scss';\n\nimport './js/task-1';\n\nimport './js/task-2';\n\nimport './js/task-3'"]}